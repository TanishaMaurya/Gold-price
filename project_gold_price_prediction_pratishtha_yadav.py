# -*- coding: utf-8 -*-
"""PROJECT : Gold price prediction PRATISHTHA YADAV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MjVV1dRdx1i-oHKpRmSlb6cBcPuMRiag
"""

# import the libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""**DATA COLLECTION AND PROCESSING**"""

# loading csv data to Pandas dataFrame
gd = pd.read_csv('/gld_price_data.csv')
gd

# find and print the shape(i.e. number of rows and columns) of the dataframe
gd.shape

# print the first 5 rows in the Dataframe
gd.head()

# print the last 5 rows in the dataframe
gd.tail()

# getting basic information about the data
gd.info()

# checking the number of missing values
gd.isnull().sum()

# checking the number of missing values
gd.describe

"""**FINDING CORRELATION**"""

correlation = gd.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, fmt = '.1f', annot = True)

# correlation values of gold
print(correlation['GLD'])

# checking the distribution of GLD price
sns.distplot(gd['GLD'], color = 'blue')

"""**Splitting the Features and Target**"""

x = gd.drop(['Date', 'GLD'],axis = 1)
y = gd['GLD']

print(x)

print(y)

# splitting into training data and test data 
x_train,x_test,y_train,y_test = train_test_split(x, y, test_size=0.2, random_state =2)

"""**MODEL TRAINING**"""

reg = RandomForestRegressor(n_estimators=100)
reg.fit(x_train,y_train)

"""**MODEL EVALUATION**"""

test_data_prediction = reg.predict(x_test)

print(test_data_prediction)

# R squared error
error_score = metrics.r2_score(y_test, test_data_prediction)
print('R square error : ', error_score)

# compare the actual values and predicted values in plot
y_test = list(y_test)

plt.plot(y_test, label = 'actual values')
plt.plot(test_data_prediction, label = 'Predicted value')
plt.title('Actual Price vs Predicted price')
plt.xlabel(' number of values ')
plt.ylabel('GLD price')
plt.legend()
plt.show()

